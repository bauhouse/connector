#!/usr/bin/env ruby
# ++
# Copyright 2004-2007 Joyent Inc.
# 
# Redistribution and/or modification of this code is 
# governed by the GPLv2.
# 
# Report issues and contribute at http://dev.joyent.com/
# 
# $Id$
# --

# NOTE: This needs to be run on a pretty constant interval ~ 5 mins
ENV['RAILS_ENV'] ||= 'production'

require File.dirname(__FILE__) + '/../config/boot'
require File.dirname(__FILE__) + '/../config/environment'
                    
log_file ="#{RAILS_ROOT}/log/alarminator.log"
logger   = Logger.new(log_file)
                        
# Get the following
Event.find(:all, :conditions => ['next_fire < ? AND fired = ?', Time.now.utc, false]).each do |event|
  
  # If the user has any way to send alarms, send it
  event.users.each do |user|
    Notification.notification_systems.each do |key, value|   
      begin
        User.current = user
        value.alarm(event, user) if user.notify_via?(key)
      rescue => e
        logger.error("#{Time.now.xmlschema} - #{e.message}")
        logger.error(e.backtrace.join("\n"))
        logger.error("\n")
      end
    end                      
  end

  this_time = event.next_occurrence_time(event.next_fire)
  next_time = event.next_occurrence_time(this_time)
  
  if next_time
    event.update_attribute(:next_fire, next_time - event.alarm_trigger_in_minutes.minutes)
  else
    event.update_attribute(:fired, true)
  end
end
