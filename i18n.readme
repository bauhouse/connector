Copyright 2004-2007 Joyent Inc.

Redistribution and/or modification of this code is governed
by either the GPLv2 or Joyent Commercial Software licenses.

Report issues and contribute at http://dev.joyent.com/

$Id$


Connector Localization
=======================

Localized version of Connector is bassed on GNU GetText[1] and the GetText
Ruby Gem[2] by Masaoh Mutoh - version 1.6.0 at the moment of write this
document - using a customized plugin, which includes several additional
utilities for RAILS.

In brief, use GetText to handle l10n of an application means that, among other
considerations, you will have a serious ammount of calls to the gettext('MyString') function
- aliased as _('MyString') for abbreviation - including both, .rb and .rhtml files,
since the GetText Ruby Gem implements also a .rhtml files parser.

Basically, the task to get an application's code ready to be localized means
that you have to complete the next steps steps:

- You should wrap any literal string in your code, which has a direct representation
into your application interface, with a call to the _() function.
In case of Ruby On Rails, this means either strings on .rb or .rhtml files.

- You will run a rake task which will parse the code of the files you indicates
it and generate a .pot file.

- From this .pot file, you will create the localizations, and place them inside their
own directories. These localization files ends with extension .po, but are just the
.pot file with the localization of the original strings.

- Once you've got the localization(s), you will run another rake task, which will create
the binnary .mo files, from where GetText will read the localizations and will try to
cache them - yes, this mean that modifications in a .mo file will not be reflected
in a site until server reboot?.

- And that's all, you add a call to the plugin function localize_with_gettext to your
ApplicationController and everything should be localized "when required".

"when required" means: GetText get the user prefered language from the params you pass
to the function call. If no params are provided, it will looks for that language from
the next places in this order:

"lang" value of QUERY_STRING > "lang" value of Cookie > HTTP_ACCEPT_LANGUAGE value > Default locale(en)

[1]http://www.gnu.org/software/gettext/
[2]http://rubyforge.org/frs/?group_id=855 | http://www.yotabanana.com/hiki/ruby-gettext.html


Some notes about GetText 'Tagging' of code
==========================================

There are some cases where has sense to use string interpolation, in order to give the properly order
on the language we're going to localize to some expressions - remember that, for example, English uses
to sort phrases just in the opposite order of latin languages. On these cases, you could just use '%s'
in the middle of those phrases but, as you can suspect, it will be meaningless for translators.

Ruby gettext gem provides us with a nice utility, which allows the usage of named params on these cases so,
for example, when you have to add the gettext calls to this phrase on a view:

    Move to <%= controller.class.group_name %>:
    
You can use the next:

    <%= _("Move to %{i18n_controller_class_groupname}")%{:i18n_controller_class_groupname => "#{controller.class.group_name}"} -%>:
    
I use to start all those symbols intended to be used on the localization by "i18n_", in order to leave
clear for coders that the name comes just from the need of localization. The remaining part of the name
uses to be something meaningfull, but on these cases where there are too much introspection.

i18n ISSUES
===========

* Has sense to add some kind of LOCALE_DATE_CONVENTION constant which holds the default conventions for dates
on different cultures as valid format modifiers for the strftime method?.
See line #295 of application_helper.rb; for example, for English times an usual format is '%m/%d/%Y', while in
Spanish - and most of the latin derivated languages - that same thing uses to be '%d/%m/%Y' and so on.
* Welcome message: Can use either the localized file or a new file version named welcome_email.es.rhtml which will
be rendered instead. Has sense or is better to keep the most possible code on the gettext mo file and use the
standard procedure?.
* About mailboxes: Can I localize the :name param when rendering group names on mail sidebar?.
* CSS: "Users Created" line break
